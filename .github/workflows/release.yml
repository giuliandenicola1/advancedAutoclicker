name: build-and-release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      build_only:
        description: 'Build only (skip creating GitHub Release)'
        required: false
        default: true
        type: boolean
      tag:
        description: 'Tag to build/release (e.g. v1.0.0). Leave empty for ad-hoc build.'
        required: false

jobs:
  build-macos:
    runs-on: macos-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
      - name: Extract version
        id: mac_ver
        run: |
          PY_VERSION=$(python -c "import re, pathlib; p=pathlib.Path('version.py');print(re.search(r'__version__\s*=\s*\"([^\"]+)\"', p.read_text()).group(1))")
          echo "version=$PY_VERSION" >> $GITHUB_OUTPUT
      - name: Generate icons
        run: python scripts/make_app_icons.py
      - name: Build app (PyInstaller)
        run: pyinstaller --noconfirm AdvancedAutoclicker_Modern.spec
      - name: Show bundle identifier
        run: |
          INFO_PLIST="dist/Advanced Autoclicker.app/Contents/Info.plist"; if [ -f "$INFO_PLIST" ]; then /usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$INFO_PLIST"; else echo 'Missing Info.plist'; fi
      - name: Create DMG
        run: bash scripts/create_dmg.sh
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            dist/Advanced Autoclicker.app
            dist/AdvancedAutoclicker-macOS.dmg

  build-windows:
    runs-on: windows-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
      - name: Extract version
        id: win_ver
        shell: pwsh
        run: |
          $v = (Get-Content version.py) -join "`n" | ForEach-Object { if ($_ -match '__version__\s*=\s*"([^"]+)"') { $Matches[1] } }
          echo "version=$v" >> $env:GITHUB_OUTPUT
      - name: Generate icons
        run: python scripts/make_app_icons.py
      - name: Build app (PyInstaller)
        run: pyinstaller --noconfirm AdvancedAutoclicker_Modern.spec
      - name: Zip distribution
        shell: pwsh
        run: Compress-Archive -Path "dist/Advanced Autoclicker" -DestinationPath "dist/AdvancedAutoclicker-Windows.zip"
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            dist/Advanced Autoclicker/**
            dist/AdvancedAutoclicker-Windows.zip

  create-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && inputs.tag != '' && inputs.build_only != true)
    steps:
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-artifacts
          path: macos
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: windows
      - name: Determine tag
        id: tagmeta
        run: |
          if [ "${GITHUB_REF#refs/tags/}" != "$GITHUB_REF" ]; then TAG_NAME="${GITHUB_REF#refs/tags/}"; else TAG_NAME="${{ inputs.tag }}"; fi
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
      - name: Generate checksums
        run: |
          echo "Checksums:" > CHECKSUMS.txt
          if [ -f "macos/AdvancedAutoclicker-macOS.dmg" ]; then shasum -a 256 "macos/AdvancedAutoclicker-macOS.dmg" >> CHECKSUMS.txt; fi
          find windows -maxdepth 6 -type f -name '*.exe' -print0 | xargs -0 shasum -a 256 >> CHECKSUMS.txt || true
          find windows -maxdepth 3 -type f -name 'AdvancedAutoclicker-Windows.zip' -print0 | xargs -0 shasum -a 256 >> CHECKSUMS.txt || true
          cat CHECKSUMS.txt
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagmeta.outputs.tag_name }}
          name: Advanced Autoclicker ${{ steps.tagmeta.outputs.tag_name }}
          draft: false
          prerelease: false
          files: |
            macos/AdvancedAutoclicker-macOS.dmg
            windows/AdvancedAutoclicker-Windows.zip
            CHECKSUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
